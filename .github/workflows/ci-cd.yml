name: Terraform + Build & Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    outputs:
      ECR_URL: ${{ steps.tfoutputs.outputs.ECR_URL }}
      EKS_NAME: ${{ steps.tfoutputs.outputs.EKS_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      # ✅ Cache Terraform plugins and modules
      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
            Infra/.terraform
          key: terraform-${{ hashFiles('Infra/**/*.tf') }}
          restore-keys: |
            terraform-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Terraform Init
        working-directory: ./Infra
        run: terraform init -input=false

      - name: Optional: Destroy old resources
        if: github.event_name == 'workflow_dispatch'
        working-directory: ./Infra
        run: |
          echo "Destroying previous Terraform resources (if any)..."
          terraform destroy -auto-approve || echo "No previous resources to destroy"

      - name: Terraform Plan
        working-directory: ./Infra
        run: terraform plan -out=tfplan -input=false

      - name: Terraform Apply
        working-directory: ./Infra
        run: terraform apply -input=false -auto-approve tfplan

      - name: Get Terraform outputs
        id: tfoutputs
        working-directory: ./Infra
        run: |
          ECR_URL=$(terraform output -raw ecr_repository_url | tr -d '\n' | tr -d '\r')
          EKS_NAME=$(terraform output -raw eks_cluster_name | tr -d '\n' | tr -d '\r')
          echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV
          echo "EKS_NAME=$EKS_NAME" >> $GITHUB_ENV
          echo "ECR_URL=$ECR_URL" >> $GITHUB_OUTPUT
          echo "EKS_NAME=$EKS_NAME" >> $GITHUB_OUTPUT

  build-and-deploy:
    name: Build Docker & Deploy
    runs-on: ubuntu-latest
    needs: terraform
    env:
      AWS_REGION: eu-north-1
      IMAGE_REPO: my-simple-app
      IMAGE_TAG: latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ✅ Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-${{ github.sha }}
          restore-keys: |
            docker-

      - name: Login to ECR
        run: |
          docker login --username AWS --password $(aws ecr get-login-password --region ${{ env.AWS_REGION }}) ${{ needs.terraform.outputs.ECR_URL }}

      - name: Build & Push Docker Image
        run: |
          IMAGE_NAME="${{ needs.terraform.outputs.ECR_URL }}/${{ env.IMAGE_REPO }}:${GITHUB_SHA}"
          echo "Building and pushing image: $IMAGE_NAME"
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t "$IMAGE_NAME" \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,new \
            --push .
          echo "IMAGE_URI=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.30.0'

      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ needs.terraform.outputs.EKS_NAME }} --region ${{ env.AWS_REGION }}
          kubectl get nodes

      - name: Deploy to EKS
        run: |
          kubectl set image deployment/my-simple-app my-simple-app=$IMAGE_URI
          kubectl rollout status deployment/my-simple-app

      - name: Verify Pods
        run: kubectl get pods -o wide

      - name: Get LoadBalancer URL
        id: get-url
        run: |
          URL=$(kubectl get svc my-simple-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "url=http://$URL" >> $GITHUB_OUTPUT

      - name: Show live application link
        run: |
          echo "✅ Your app is live at: ${{ steps.get-url.outputs.url }}"
