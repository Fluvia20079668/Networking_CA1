name: Terraform + Build & Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-north-1
  IMAGE_REPO: my-simple-app

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    outputs:
      ECR_URL: ${{ steps.tfoutputs.outputs.ecr_repository_url }}
      EKS_NAME: ${{ steps.tfoutputs.outputs.eks_cluster_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./Infra
        run: terraform init -input=false

      - name: Terraform Plan
        working-directory: ./Infra
        run: terraform plan -out=tfplan -input=false

      - name: Terraform Apply
        working-directory: ./Infra
        run: terraform apply -input=false -auto-approve tfplan

      - name: Get Terraform outputs
        id: tfoutputs
        working-directory: ./Infra
        run: |
          echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
          echo "eks_cluster_name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT

  build-and-deploy:
    name: Build Docker & Deploy
    runs-on: ubuntu-latest
    needs: terraform
    env:
      AWS_REGION: ${{ env.AWS_REGION }}
      IMAGE_REPO: ${{ env.IMAGE_REPO }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ECR
        run: |
          ECR_URL="${{ needs.terraform.outputs.ECR_URL }}"
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin "$ECR_URL"

      - name: Build & Push Docker Image
        run: |
          ECR_URL="${{ needs.terraform.outputs.ECR_URL }}"
          IMAGE_TAG=${{ github.sha }}
          IMAGE_NAME="${ECR_URL}/${{ env.IMAGE_REPO }}:${IMAGE_TAG}"
          echo "Building image: $IMAGE_NAME"
          docker buildx build --platform linux/amd64,linux/arm64 -t "$IMAGE_NAME" --push .
          echo "IMAGE_URI=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.30.0'

      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --name "${{ needs.terraform.outputs.EKS_NAME }}" --region ${{ env.AWS_REGION }}
          kubectl get nodes

      - name: Deploy to EKS (apply manifests, update image & restart)
        run: |
          # Update deployment manifest with new image
          sed -i "s|image: nginx:stable|image: $IMAGE_URI|g" k8s/k8s-deployment.yaml
          
          # Apply manifests
          kubectl apply -f k8s/k8s-deployment.yaml
          kubectl apply -f k8s/k8s-service.yaml
          
          # Force rollout restart to pick up new image
          kubectl rollout restart deployment/my-simple-app
          
          # Wait for deployment to complete
          kubectl rollout status deployment/my-simple-app --timeout=120s

      - name: Get LoadBalancer URL
        id: get-url
        run: |
          for i in {1..20}; do
            URL=$(kubectl get svc my-simple-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ -n "$URL" ]; then
              break
            fi
            sleep 15
          done
          echo "url=http://$URL" >> $GITHUB_OUTPUT

      - name: Show live application link
        run: echo 'âœ… Your app is live at: ${{ steps.get-url.outputs.url }}'

      - name: Add app URL to GitHub Actions summary
        run: |
          echo "### ðŸš€ Live Application" >> $GITHUB_STEP_SUMMARY
          echo "[Open My App](${{ steps.get-url.outputs.url }})" >> $GITHUB_STEP_SUMMARY
