name: Terraform + Build & Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-north-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: infra
        run: terraform init -input=false

      - name: Terraform Plan
        working-directory: infra
        run: terraform plan -out=tfplan -input=false

      - name: Terraform Apply
        working-directory: infra
        run: terraform apply -input=false -auto-approve tfplan

      - name: Get Terraform outputs
        working-directory: infra
        id: tfoutputs
        run: |
          # Trim hidden characters to prevent kubectl/docker errors
          ECR_URL=$(terraform output -raw ecr_repository_url | tr -d '\n' | tr -d '\r')
          EKS_NAME=$(terraform output -raw eks_cluster_name | tr -d '\n' | tr -d '\r')
          echo "ECR_URL=$ECR_URL" >> $GITHUB_ENV
          echo "EKS_NAME=$EKS_NAME" >> $GITHUB_ENV

  build-and-deploy:
    name: Build Docker & Deploy
    runs-on: ubuntu-latest
    needs: terraform
    env:
      AWS_REGION: eu-north-1
      IMAGE_REPO: my-simple-app
      IMAGE_TAG: latest
      ECR_URL: ${{ env.ECR_URL }}
      EKS_NAME: ${{ env.EKS_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ECR
        run: |
          docker login --username AWS --password $(aws ecr get-login-password --region ${{ env.AWS_REGION }}) ${{ env.ECR_URL }}

      - name: Build & Push Docker Image
        run: |
          IMAGE_NAME="${{ env.ECR_URL }}/${{ env.IMAGE_REPO }}:${GITHUB_SHA}"
          echo "Building image: $IMAGE_NAME"
          docker buildx build --platform linux/amd64,linux/arm64 -t "$IMAGE_NAME" --push .
          echo "IMAGE_URI=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.30.0'

      - name: Configure kubeconfig
        run: |
          echo "Configuring kubeconfig for cluster: ${{ env.EKS_NAME }}"
          aws eks update-kubeconfig --name ${{ env.EKS_NAME }} --region ${{ env.AWS_REGION }}
          kubectl config get-contexts
          kubectl get nodes

      - name: Debug kubeconfig
        run: |
          echo "Kubeconfig path: $KUBECONFIG"
          kubectl config current-context
          kubectl cluster-info

      - name: Deploy to EKS
        run: |
          echo "Updating deployment with image: $IMAGE_URI"
          kubectl set image deployment/my-simple-app my-simple-app=$IMAGE_URI
          kubectl rollout status deployment/my-simple-app

      - name: Verify Pods
        run: kubectl get pods -o wide

      - name: Get LoadBalancer URL
        id: get-url
        run: |
          URL=$(kubectl get svc my-simple-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "url=http://$URL" >> $GITHUB_OUTPUT

      - name: Show live application link
        run: |
          echo "âœ… Your app is live at:"
          echo "${{ steps.get-url.outputs.url }}"
