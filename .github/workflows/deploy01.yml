name: Build and Deploy to ECR and EKS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-north-1
  IMAGE_REPO: my-simple-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 4Ô∏è‚É£ Log in to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin $(echo "${{ secrets.ECR_REGISTRY }}" | tr -d '\n' | tr -d '\r')

      # 5Ô∏è‚É£ Build and push Docker image (unique tag per commit)
      - name: Build and push Docker image
        run: |
          ECR_REGISTRY=$(echo "${{ secrets.ECR_REGISTRY }}" | tr -d '\n' | tr -d '\r')
          IMAGE_TAG=${{ github.sha }}
          IMAGE_NAME="${ECR_REGISTRY}/${{ env.IMAGE_REPO }}:$IMAGE_TAG"
          echo "Building image: $IMAGE_NAME"
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t "$IMAGE_NAME" \
            --push .
          echo "IMAGE_URI=$IMAGE_NAME" >> $GITHUB_ENV

      # 6Ô∏è‚É£ Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.30.0'

      # 7Ô∏è‚É£ Configure kubeconfig for EKS cluster
      - name: Configure kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name my-eks-cluster --region ${{ env.AWS_REGION }}
          kubectl get nodes

      # 8Ô∏è‚É£ Deploy to EKS with new image
      - name: Deploy to EKS
        run: |
          echo "Updating deployment with image: $IMAGE_URI"
          kubectl set image deployment/my-simple-app my-simple-app=$IMAGE_URI
          echo "Waiting for rollout..."
          kubectl rollout status deployment/my-simple-app

      # 9Ô∏è‚É£ Verify pods
      - name: Verify pods
        run: kubectl get pods -o wide

      # üîü Get LoadBalancer URL
      - name: Get LoadBalancer URL
        id: get-url
        run: |
          URL=$(kubectl get svc my-simple-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Live URL: http://$URL"
          echo "url=http://$URL" >> $GITHUB_OUTPUT

      # 11Ô∏è‚É£ Show live application link
      - name: Show live application link
        run: |
          echo "‚úÖ Your app is live at:"
          echo "${{ steps.get-url.outputs.url }}"

      # 12Ô∏è‚É£ Cleanup
      - name: Cleanup
        run: docker image prune -af
